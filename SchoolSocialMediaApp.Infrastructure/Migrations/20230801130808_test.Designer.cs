// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolSocialMediaApp.Data;

#nullable disable

namespace SchoolSocialMediaApp.Infrastructure.Migrations
{
    [DbContext(typeof(SchoolSocialMediaDbContext))]
    [Migration("20230801130808_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the user was created.");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The first name of the user.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The image url of the user.");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit")
                        .HasComment("Is admin of the app");

                    b.Property<bool>("IsInvited")
                        .HasColumnType("bit")
                        .HasComment("Has a pending invitation for a school");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit")
                        .HasComment("Is parent in a school");

                    b.Property<bool>("IsPrincipal")
                        .HasColumnType("bit")
                        .HasComment("Is principal of a school");

                    b.Property<bool>("IsStudent")
                        .HasColumnType("bit")
                        .HasComment("Is student in a school");

                    b.Property<bool>("IsTeacher")
                        .HasColumnType("bit")
                        .HasComment("Is teacher in a school");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("The last name of the user.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the parent of the user.");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<Guid?>("SchoolId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the school the user is in.");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the teacher of the user.");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParentId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("TeacherId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5181f14c-a6fc-464c-1e0f-08db7bfe5717"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5c564bf9-a235-4ec4-8dc4-8bcf12ef4966",
                            CreatedOn = new DateTime(2023, 8, 1, 16, 8, 7, 990, DateTimeKind.Local).AddTicks(2203),
                            Email = "admin@admins.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            ImageUrl = "/images/defaultProfile.png",
                            IsAdmin = false,
                            IsInvited = false,
                            IsParent = false,
                            IsPrincipal = false,
                            IsStudent = false,
                            IsTeacher = false,
                            LastName = "Admin",
                            LockoutEnabled = true,
                            NormalizedEmail = "ADMIN@ADMINS.COM",
                            NormalizedUserName = "ADMIN.ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEIsL1v6/QL2rNMmR5zG1hms/H8TGNduUTRQomKn5wpXHsv9g6fzKaAywLywXYuTexw==",
                            PhoneNumber = "0000000000",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BC7FH6NJQYGF3HPFVFUTZA3OOQPGHZHC",
                            TwoFactorEnabled = false,
                            UserName = "admin.admin"
                        },
                        new
                        {
                            Id = new Guid("a40fc683-6f20-49f8-1e10-08db7bfe5717"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0f1bb1eb-c9b9-41cf-b37f-af1c03e4f280",
                            CreatedOn = new DateTime(2023, 8, 1, 16, 8, 7, 991, DateTimeKind.Local).AddTicks(6859),
                            Email = "principal@principals.com",
                            EmailConfirmed = false,
                            FirstName = "Principal",
                            ImageUrl = "/images/defaultProfile.png",
                            IsAdmin = false,
                            IsInvited = false,
                            IsParent = false,
                            IsPrincipal = false,
                            IsStudent = false,
                            IsTeacher = false,
                            LastName = "Principal",
                            LockoutEnabled = true,
                            NormalizedEmail = "PRINCIPAL@PRINCIPALS.COM",
                            NormalizedUserName = "PRINCIPAL.PRINCIPAL",
                            PasswordHash = "AQAAAAEAACcQAAAAEHTnpkr6gL/JNctl/jJR1Op1VQCHqUl+1tVqxzLd30urM9hGeDIRvpOGzY8Hq9bd9A==",
                            PhoneNumber = "1111111111",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ZPXT765IMVDPWRJUCGNLC2RDDWZRP6VA",
                            TwoFactorEnabled = false,
                            UserName = "principal.principal"
                        },
                        new
                        {
                            Id = new Guid("37453265-50a9-418b-1e11-08db7bfe5717"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4cf98984-e485-438d-831b-687168281aac",
                            CreatedOn = new DateTime(2023, 8, 1, 16, 8, 7, 993, DateTimeKind.Local).AddTicks(22),
                            Email = "teacher@teachers.com",
                            EmailConfirmed = false,
                            FirstName = "Teacher",
                            ImageUrl = "/images/defaultProfile.png",
                            IsAdmin = false,
                            IsInvited = false,
                            IsParent = false,
                            IsPrincipal = false,
                            IsStudent = false,
                            IsTeacher = false,
                            LastName = "Teacher",
                            LockoutEnabled = true,
                            NormalizedEmail = "TEACHER@TEACHERS.COM",
                            NormalizedUserName = "TEACHER.TEACHER",
                            PasswordHash = "AQAAAAEAACcQAAAAEM24WYKmPOUA0utHBxc1PmRvmT9RySlJpXSFDFzkNuV75sJRDRKMApb4gEvj+qSqfA==",
                            PhoneNumber = "2222222222",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "BXEWJLAKEB6EO23MT2TY57ETV7XTQVZ6",
                            TwoFactorEnabled = false,
                            UserName = "teacher.teacher"
                        },
                        new
                        {
                            Id = new Guid("45c2c82d-a4ac-4da1-1e12-08db7bfe5717"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6a979441-e166-4d7c-bc4c-4b46e5cae55a",
                            CreatedOn = new DateTime(2023, 8, 1, 16, 8, 7, 994, DateTimeKind.Local).AddTicks(3254),
                            Email = "parent@parents.com",
                            EmailConfirmed = false,
                            FirstName = "Parent",
                            ImageUrl = "/images/defaultProfile.png",
                            IsAdmin = false,
                            IsInvited = false,
                            IsParent = false,
                            IsPrincipal = false,
                            IsStudent = false,
                            IsTeacher = false,
                            LastName = "Parent",
                            LockoutEnabled = true,
                            NormalizedEmail = "PARENT@PARENTS.COM",
                            NormalizedUserName = "PARENT.PARENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEKjdCLR5p9fQ/DP+BbNxvKr8M6pBWfjnRnHf8uXxXEDqhUyedNX6D2GuwoPeNqdw5g==",
                            PhoneNumber = "3333333333",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "V3A2ZGPBDCFNLVW2EP5WEVPROE4265ZW",
                            TwoFactorEnabled = false,
                            UserName = "parent.parent"
                        },
                        new
                        {
                            Id = new Guid("5dbd2e13-b653-41b3-1e13-08db7bfe5717"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "23370626-f28b-4650-8d07-30a2d6be75d3",
                            CreatedOn = new DateTime(2023, 8, 1, 16, 8, 7, 995, DateTimeKind.Local).AddTicks(6497),
                            Email = "student@students.com",
                            EmailConfirmed = false,
                            FirstName = "Student",
                            ImageUrl = "/images/defaultProfile.png",
                            IsAdmin = false,
                            IsInvited = false,
                            IsParent = false,
                            IsPrincipal = false,
                            IsStudent = false,
                            IsTeacher = false,
                            LastName = "Student",
                            LockoutEnabled = true,
                            NormalizedEmail = "STUDENT@STUDENTS.COM",
                            NormalizedUserName = "STUDENT.STUDENT",
                            PasswordHash = "AQAAAAEAACcQAAAAEH3YNItWCrE36aGh1u3OyaqbpUAK1dga9LEwyVM5RFD9cuXoiJo+nSa8eUFETE35lg==",
                            PhoneNumber = "4444444444",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "X64IPK5BPQMIAOA7VWMFQ3NRRAKFHGTD",
                            TwoFactorEnabled = false,
                            UserName = "student.student"
                        });
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Comment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier for the comment.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The content of the comment.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the comment was created.");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the creator of the comment.");

                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the post the comment is on.");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");

                    b.HasComment("A comment made by a user on a post.");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id is the primary key of the invitation table.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("CreatedOn is the date and time the invitation was created.");

                    b.Property<bool>("IsPending")
                        .HasColumnType("bit")
                        .HasComment("IsPending is a boolean that determines if the invitation is pending.");

                    b.Property<Guid>("ReceiverId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("ReceiverId is the foreign key of the receiver of the invitation.");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Role is the role the invitation is for.");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("SchoolId is the foreign key of the school the invitation is for.");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("SenderId is the foreign key of the sender of the invitation.");

                    b.HasKey("Id");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SchoolId");

                    b.HasIndex("SenderId");

                    b.ToTable("Invitations");

                    b.HasComment("Invitation table holds all the invitations sent to users to join a school and a role in that school. It holds the sender, receiver, school, role, and status of the invitation.");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Post", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier for the post.");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)")
                        .HasComment("The content of the post.");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("The date and time the post was created.");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Id of the post owner");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit")
                        .HasComment("Is the post edited.");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the school the post is for.");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Posts");

                    b.HasComment("A post made by a user.");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.PostsLikes", b =>
                {
                    b.Property<Guid>("PostId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier for the post which is liked.");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The unique identifier for the user who liked the post.");

                    b.HasKey("PostId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("PostsLikes");

                    b.HasComment("Users who have liked a post");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the school.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasComment("The description of the school.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasComment("The image url of the school.");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasComment("The location of the school.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("The name of the school.");

                    b.Property<Guid>("PrincipalId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("The id of the director of the school.");

                    b.HasKey("Id");

                    b.ToTable("Schools");

                    b.HasComment("A school that has a director and students.");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "Parent")
                        .WithMany("Kids")
                        .HasForeignKey("ParentId");

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.School", "School")
                        .WithOne("Principal")
                        .HasForeignKey("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "SchoolId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "Teacher")
                        .WithMany("Students")
                        .HasForeignKey("TeacherId");

                    b.Navigation("Parent");

                    b.Navigation("School");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Comment", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany("Comments")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Invitation", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "Receiver")
                        .WithMany("Invitations")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.School", "School")
                        .WithMany("Invitations")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "Sender")
                        .WithMany("SentInvitations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("School");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Post", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.School", "School")
                        .WithMany("Posts")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("School");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.PostsLikes", b =>
                {
                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", "User")
                        .WithMany("LikedPosts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Invitations");

                    b.Navigation("Kids");

                    b.Navigation("LikedPosts");

                    b.Navigation("Posts");

                    b.Navigation("SentInvitations");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("SchoolSocialMediaApp.Infrastructure.Data.Models.School", b =>
                {
                    b.Navigation("Invitations");

                    b.Navigation("Posts");

                    b.Navigation("Principal")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
